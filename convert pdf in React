
npm install react-pdf/renderer


import { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import { PDFDownloadLink, Page, Text, View, Document, StyleSheet,pdf  } from '@react-pdf/renderer';
import styled from 'styled-components'
const DivStyled = styled.div`
border : 1px solid gray;
border-radius: 10px;
padding: 10px;
margin: 20px;
`


// Styles for the PDF document
const styles = StyleSheet.create({
    page: {
      flexDirection: 'column',
      backgroundColor: '#E4E4E4',
      padding: 20,
    },
    section: {
      margin: 10,
      padding: 10,
      borderBottom: '1px solid #000',
    },
    table: {
      display: 'table',
      width: 'auto',
      borderStyle: 'solid',
      borderWidth: 1,
      borderRightWidth: 0,
      borderBottomWidth: 0,
    },
    tableRow: {
      margin: 'auto',
      flexDirection: 'row',
    },
    tableCol: {
      width: '50%',
      borderStyle: 'solid',
      borderWidth: 1,
      borderLeftWidth: 0,
      borderTopWidth: 0,
    },
    tableCell: {
      margin: 'auto',
      marginTop: 5,
      fontSize: 10,
      padding: 5,
    },
  });


// PDF document component
const MyDocument = ({ data }) => (
    <Document>
      <Page size="A4" style={styles.page}>
        {data.filter(e => e.id < 30).map((e, index) => (
          <View key={index} style={styles.section}>
            <View style={styles.table}>
              <View style={styles.tableRow}>
                <View style={styles.tableCol}>
                  <Text style={styles.tableCell}>User Id</Text>
                </View>
                <View style={styles.tableCol}>
                  <Text style={styles.tableCell}>{e.userId}</Text>
                </View>
              </View>
              <View style={styles.tableRow}>
                <View style={styles.tableCol}>
                  <Text style={styles.tableCell}>Title</Text>
                </View>
                <View style={styles.tableCol}>
                  <Text style={styles.tableCell}>{e.title}</Text>
                </View>
              </View>
              <View style={styles.tableRow}>
                <View style={styles.tableCol}>
                  <Text style={styles.tableCell}>Body</Text>
                </View>
                <View style={styles.tableCol}>
                  <Text style={styles.tableCell}>{e.body}</Text>
                </View>
              </View>
            </View>
          </View>
        ))}
      </Page>
    </Document>
  );

  
const Print = ()=> {
   
    const [data , setData] = useState([]);
    const [pdfUrl, setPdfUrl] = useState('');
    const fetchData  = async () =>{
        const response = await fetch("https://jsonplaceholder.typicode.com/posts");
        const data = await response.json();
        setData(data)
       }
    useEffect(()=>{
        fetchData()
    },[])
    const generatePdf = async () => {
        const doc = <MyDocument data={data} />;
        const asPdf = pdf([]);
        asPdf.updateContainer(doc);
        const blob = await asPdf.toBlob();
        const pdfBlobUrl = URL.createObjectURL(blob);
        setPdfUrl(pdfBlobUrl);
      };

    return(
        <DivStyled>
            <p>Print area</p>
            {data.filter(e=>e.id<30).map(e=>{
                return(
                    <div>
                   <table border="1" cellPadding="0">
                    <tr>
                        <td>User Id </td>
                        <td>{e.userId}</td>
                    </tr>
                    <tr>
                        <td>Title </td>
                        <td>{e.title}</td>
                    </tr>
                    <tr>
                        <td>Body</td>
                        <td>{e.body}</td>
                    </tr>
                   </table>

                    
                    </div>
                )
            })}
            <PDFDownloadLink document={<MyDocument data={data} />} fileName="data.pdf">
                    {({ blob, url, loading, error }) =>
                    loading ? 'Loading document...' : 'Download PDF'
                    }
                    </PDFDownloadLink>
                    <button onClick={generatePdf}>Generate PDF</button>
      {pdfUrl && (
       <a
       href={`https://api.whatsapp.com/send?text=Here%20is%20your%20PDF%20file%3A%20${encodeURIComponent(pdfUrl)}`}
       target="_blank"
       rel="noopener noreferrer"
     >
       Share PDF on WhatsApp
     </a>
      )}
            
        </DivStyled>
    )
}
export default Print
